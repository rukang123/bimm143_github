---
title: "CLASS 13 RNASeq analysis with DESeq2"
author: "Ruofan Kang (A17236920)"
format: pdf
editor: visual
---

Today we will examine RNASeq data from a published RNA-seq experiment where airway smooth muscle cells were treated with **dexamethasone**, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

```{r}
#Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```

> Q1. How many genes are in this dataset?

```{r}
nrow(counts)
```

> Q2. How many 'control' cell lines do we have?

```{r}
table(metadata$dex)
```

```{r}
sum(metadata$dex == "control")
```

## Toy differential gene expression

Let's start by calculating the mean counts per gene in the "control" samples. We can then compare this value for each gene to the mean counts in the "treated" samples (i.e. columns)

-step 1. Find which colums in the 'counts' correspond "control" samples. -steps 2. Calculate the mean value per gene in these columns. - step 3. Store my answer for later in 'control.mean'

```{r}
head(counts)
```

```{r}
control.inds <- metadata$dex =="control"
```

```{r}
metadata[control.inds,]
```

```{r}
control.counts <- counts[, control.inds]
head(control.counts)
```

```{r}
apply(control.counts, 1, mean)
```

> Q3. How would you make the above code in either approach more robust?

```{r}
control.mean<- rowMeans(control.counts)
```

Now the same steps to get "treated.mean"

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated.inds <- metadata$dex =="treated"
```

```{r}
metadata[treated.inds,]
```

```{r}
treated.counts <- counts[, treated.inds]
head(treated.counts)
```

```{r}
treated.mean <- rowMeans( counts[, metadata$dex == "treated"])
```

To keep us tidy lets put 'control.mean' and 'treated.mean' vectors together as two columns of a new data.frame.

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```

```{r}
head(meancounts)
```

> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts)
```

> Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom\_?() function would you use for this plot?

I will use geom_point function for this plot.

And a ggplot

```{r}
library(ggplot2)

ggplot(meancounts)+
  aes(control.mean, treated.mean)+
  geom_point(alpha=0.2)
```

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

The plot(log) that allows me to do this.

```{r}
plot(meancounts, log="xy")
```

Log transformations are super useful when our data is skered and measured over a wide range like this. We can use different log transformations like base 10 or natural logs but we most often prefer log2 units.

```{r}
#Treated/Control
log2(10/10)
```

what if there was a doubling

```{r}
log2(20/10)
```

Half counts

```{r}
log2(10/20)
```

```{r}
log2(40/10)
```

Lets add a log2 fold-change column to our little 'meancounts' data. frame:

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/
                            meancounts$control.mean)

head(meancounts)
```

There are a couple of "weird" results. Namely, the NaN ("not a number") and -Inf (negative infinity) results.

The NaN is returned when you divide by zero and try to take the log. The -Inf is returned when you try to take the log of zero. It turns out that there are a lot of genes with zero expression. Let's filter our data to remove these genes.

```{r}
to.rm.inds<- rowSums( meancounts[,1:2] ==0 ) >0
mycounts <- meancounts[!to.rm.inds, ]
```

The "!" mark flips TRUE values to FALSE and vice-versa...

```{r}
x <- c(TRUE, FALSE, TRUE)
!x
```

> Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

The arr.ind argument purpose to identify and remove genes with zero expression in any samples.The reason we want to get the first column of the output and call the unique() function is because this effectively identifies every gene with zero expression in any sample without having to repeat it.

```{r}
x
which(x)
```

```{r}
dim(mycounts)
```

```{r}
head(mycounts)
```

A common threshold used for calling something differentially expressed is a log2(FoldChange) of greater than 2 or less than -2.

Let's filter the dataset both ways to see how many genes are up or down-regulated.

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

```{r}
sum(up.ind)
```

> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

```{r}
sum(down.ind)
```

> Q10. Do you trust these results? Why or why not?

We cannot trust the results. This is because the current analysis is based on fold changes, but fold changes are large. Fold changes by themselves do not indicate statistical significance. We need to do more work to determine if the differences we see are significant.

But we forgot all about statistical significance of there differences...

We will use the DESeq2 to do this analysis properly...

# Using DESeq2

Like any package we must load up with a 'library()' call

```{r}
library(DESeq2)
```

Setup the input object requied for dds

```{r}
dds <- DESeqDataSetFromMatrix(countData= counts,
                       colData = metadata,
                       design= ~dex)
```

Now we can run our DESeq analysis

```{r}
dds <-DESeq(dds)
```

Get our results back from the 'dds' object

```{r}
res <- results(dds)
head(res)
```

# A summary results plot

Valcano plot. This is a comon type of summary figure that keeps both our inner biologist and inner stats nerd happy because it shows both P-values and Log2(Fold-changes)

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=2, col="red")
abline(v=-2, col="red")
abline(h=-log(0.05), col="blue")
```

```{r}
log(0.1)
log(0.00001)
```

Save our results to data...

```{r}
write.csv(res, file="deseq_results.csv")
```

Now we can run our DESeq analysis

```{r}
head(res)
```

# Adding annotation data

Our result table so far only contains the Ensembl gene IDs. However, alternative gene names and extra annotation are usually required for informative interpretation of our results. In this section we will add this necessary annotation data to our results.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

The main fuction we will use here is called 'mapIds'

Our current IDs are here:

```{r}
#mapIds()
head(row.names(res))
```

There are in ENSEMABLE format. I want "SYMBOL" ids:

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
head(res)
```

Lets add GENENAME

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our 
                     column="SYMBOL",    # The new format we want
                     multiVals="first")
```

```{r}
res$entrez
```

## Pathway analysis

We will use the **gage** package along with **pathview** here to do geneset enrichmment (a.k.a pathway analysis) and figure generation respectively.

```{r}
library(pathview)
library(gage)
library(gageData)
```


what we need for 'gage()' is our genes in ENTREZ id format with a meansure of their importance.

It wants a vector of e.g fold-changes.

```{r}
foldchanges <- res$log2FoldChange
head(foldchanges)
```

Add ENTREZ ids as 'names()' to my 'foldchanges' vector.

```{r}
names(foldchanges) <- res$entrez
head(foldchanges)
```

Now we can run 'gage()' with this input vector and the genset we want to examine for overlap/enrichment

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

Look at the results

```{r}
attributes(keggres)
```

```{r}
head(keggres$less, 3)
```

We can view these pathways with our geneset genes highlighted using the 'pathview()' function.E.g. for asthma I will use the pathway id hsa05310 as seen above.

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![My genes involved in Asthma pathway](hsa05310.pathview.png)
